ros-humble-moveit-task-constructor-visualization (0.1.0-1jammy) jammy; urgency=high

  * Rely on CXXFLAGS definition from moveit_common package
  * Merge branch 'master' into ros2
  * Fix more -Wold-style-cast warnings
  * fixup! Fix clang-tidy warnings
  * Fix clang-tidy warnings
    - Replace old-style casts
    - Fix missing initialization
  * Maintain compatibility to Qt 5.12 (for Focal) (#392 <https://github.com/JafarAbdi/moveit_task_constructor/issues/392>)
  * Fix clang-tidy warning (#393 <https://github.com/JafarAbdi/moveit_task_constructor/issues/393>)
  * clang-tidy: fix variable/method naming
  * Merge branch master into ros2
  * Disable clang-tidy checks generating false positives
  * Fix clang-tidy warnings
  * Fix cmake indentation
  * Merge CI fixes/improvements
  * Fix TaskListModelTest.deletion: run required Qt event loop
  * Avoid unused-parameter warnings
  * Use catkin_INCLUDE_DIRS as system includes
    ... to suppress warnings outside the code base
  * Do not dictate C++ standard
    C++14 is default in clang/gcc anyway and latest log4cxx requires C++17.
    Qt on Ubuntu 18.04 sets C++11. Hence we use MoveIt's cmake macro to ensure C++14 at least.
  * Fix rolling compatibility with jammy
    Fix compile warning
    Update clang-format version to 12
  * Merge branch 'master' into wip-python-api
  * ROS 2 Migration (#170 <https://github.com/JafarAbdi/moveit_task_constructor/issues/170>)
  * Port visualization to ROS2
  * Fix -Wsign-compare
  * Merge pull request #304 <https://github.com/JafarAbdi/moveit_task_constructor/issues/304> from v4hn/pr-move-to-tests
    Add MoveTo tests & make them pass
  * simplify parameter-free lambdas
    I just didn't know the syntax was allowed
  * Update main scene node's pose on updates of robot's model frame (#292 <https://github.com/JafarAbdi/moveit_task_constructor/issues/292>)
  * Merge branch 'master' into wip-python-api
  * Fix placement of Panel widget
    Since #1611 <https://github.com/JafarAbdi/moveit_task_constructor/issues/1611> and 41d62f5749b05c68131b752c605191518eaf19d5,
    the floating argument for panels is correctly handled.
    Here, we don't want the panel to be floating.
  * Fix warning: control reaches end of non-void function
  * include OGRE headers via SYSTEM
  * Add missing semicolons after cleanup of MoveIt
  * Fix compiler warnings
  * Merge branch 'master' into wip-python-api
  * Fix compiler warnings
    unused parameters and functions
  * Fix catkin_lint warning
    include paths 'motion_planning_tasks/src' and 'motion_planning_tasks' are ambiguous
  * Merge pull request #261 <https://github.com/JafarAbdi/moveit_task_constructor/issues/261> from ubi-agni/GHA
    Switch to GitHub actions
  * Fix more clang-tidy issues
  * clang-tidy auto-fixes
  * drop useless assert
  * Fix duplicated layout name
    Fixes https://github.com/ros-planning/moveit_task_constructor/issues/227
  * rviz: catch + display invalid-robot-model exception
  * Modernize: require cmake version 3.1.3
  * Merge branch 'master' into wip-python-api
  * Fix (again) creation of TaskPanel
  * Fix ambiguous member initialization
  * Configurable handling of old remote tasks
    - keep all previous tasks
    - replace with next task of same id
    - always remove
  * Merge PR #214 <https://github.com/JafarAbdi/moveit_task_constructor/issues/214> (fix various issues) and #215 <https://github.com/JafarAbdi/moveit_task_constructor/issues/215> (rework rviz introspection)
  * Create task-specific ServiceClients to fetch solutions
    This finally allows to have multiple tasks publishing in the same namespace.
  * Rename process_id -> task_id
  * Rename TaskPrivate::id -> TaskPrivate::ns
    TaskPrivate's id_ actually served as a namespace parameter.
  * Remove mainloop jobs
    All topics are handled by the Display's update_nh_ within the main GUI thread anyway.
  * Fix memory leakage
  * Fix TaskView segfault
    We shouldn't "change" solution/property models if they didn't actually changed.
  * TaskPanel: Fix assertion
    When loading an .rviz config with MTC displays disabled, the mainloop_job to create a TaskPanel
    will never be executed (because the display is disabled). Removing the display will then hit the
    assertion that DISPLAY_COUNT > 0.
    Fixed, by not relying on Display::update, but just scheduling a Qt GUI job via QTimer::singleShot().
  * Update TaskModel for all columns, including time
  * tf2 compatibility for Noetic (#206 <https://github.com/JafarAbdi/moveit_task_constructor/issues/206>)
  * Merge branch master into wip-python-api
  * Apply clang-format-10 (#199 <https://github.com/JafarAbdi/moveit_task_constructor/issues/199>)
  * adapt tests to new moveit_resources layout (#200 <https://github.com/JafarAbdi/moveit_task_constructor/issues/200>)
  * document axiom in StageStatistics.solved
    If the axiom is violated, sorting in the rviz panel will fail.
  * fixup: forward dataChanged signal for solutions too
  * remove trail visualization if task is deleted
  * introspection *can* be disabled
    Otherwise a new task will always setup the publisher,
    even if introspection is disabled afterwards.
    It is a good idea to keep introspection on, but there should be a way to initialize the C++ classes without ROS communication.
  * only subscribe to statistics after receiving a non-reset description
  * replace remaining typedefs by using declaration
    I have no idea why these were not picked up by clang-tidy.
  * Fixup: forward dataChanged() to QTreeView (#186 <https://github.com/JafarAbdi/moveit_task_constructor/issues/186>)
  * Merge pull request #146 <https://github.com/JafarAbdi/moveit_task_constructor/issues/146> from v4hn/pr-master-rework-panel
    rework RViz panel
  * panel: start with all options expanded
  * panel: only local models can be edited
  * add "show time column" to context menu
  * panel: optionally disable time column
  * panel: remove "interactive" add task from context menu
    until there is anything reasonable to add. At the moment, there isn't.
    This is one of the UI end-points for Robert's proposed drag&drop task system.
  * panel: add margin above buttons
  * solutions view: show the comment as tooltip
    Makes much more sense than the internal id.
  * panel: have property-view occupy much less space by default
    The initially more important part of the panel is clearly the task structure.
    For longer tasks, the empty properties-view adds a scrollbar to the task when none would be needed.
  * panel: lower-case header texts
    either all lower or all upper case.
  * panel: unify alignment of header texts
    User feedback said it's awkward and I quite agree. :)
  * rework RViz panel
    There's no need for individually resizable columns, but all numeric
    content should autoresize and be visible all the time.
    We will add an option to hide the time column in the future.
    Remove intermediate AutoAdjustingTreeView layer to simplify code.
    Resizing the columns did not work perfectly well before
    and the auto_hide_cols_ feature was not really used.
  * Avoid error about moc_xxx files not found (#181 <https://github.com/JafarAbdi/moveit_task_constructor/issues/181>)
    Avoid error about moc_xxx files not found.
    * Added include dir option in CMakeList to avoid error on moc_xxx files generation
  * clang-tidy: performance-*
    I NOLINTed the noexcept move constructor for Task for now because
    the constructor *can* indeed throw exceptions.
  * clang-tidy: llvm-namespace-comment
  * clang-format: readability-identifier-naming
    Probably the most invasive format patch, also changing some internal API.
    I deliberately disabled ClassCase and MethodCase checks for the moment
    to avoid public API changes in this patch set.
  * clang-format: readability-container-size-empty
  * clang-tidy: readability-named-parameters
  * clang-tidy: modernize-use-nullptr
  * clang-tidy: modernize-loop-convert
  * clang-tidy: modernize-use-override
  * clang-tidy: use using over typedef
    $ run-clang-tidy.py -header-filter='.*' -checks='modernize-use-using' -fix
    add .clang-tidy file
  * shorten task id if Task object has no name
  * connect to statistics *after* first description
    This avoids the case where we would asynchronously receive the statistics
    *before* the description and wouldn't know what to do with it.
  * simplify reading
    my eyes hurt trying to cope with it.first->second .
  * Merge #156 <https://github.com/JafarAbdi/moveit_task_constructor/issues/156>: Rework interface resolution
  * minor cleanup, fixing warnings, improving comments
  * remove logical flow BOTH / simplify pruning
    The PROPAGATE concept BOTH declared the stages *will* propagate solutions in
    either direction. ANY, on the other hand, only means the propagation
    direction is *not resolved yet* (but will be at planning time).
    BOTH was originally described to support a more general control flow
    than was eventually decided to support. The four exclusive Stage interfaces
    CONNECT, PROPAGATE_FORWARDS, PROPAGATE_BACKWARDS, and GENERATOR
    do not allow for BOTH as a valid setup anymore, unless you setup a very
    convolved task like Alternatives(GEN, PROP) - Alternatives(PROP, GEN)
    which would be very complex to inspect. The same functionality can still
    be achieved more readable as Alternatives(Seq(GEN, PROP), Seq(PROP, GEN)).
    The confusion between BOTH (propagator *will* send in both directions) and
    ANY (propagator will send in *either* direction, decided during init) led
    to a lot of confusion with users and was not fully accounted
    throughout the pipeline.
    Adjust tests.
    Notice the difference between ANY (unresolved propagator) and UNKNOWN
    (a container before introspecting its children). propagators still
    report UNKNOWN as requiredInterface though to simplify control flow.
    The simplification enables a much simpler linear inference of the connective
    structure of a task, as the first interface direction is always given.
    Additionally, unify the resource setup for static interfaces to run
    in the constructor, and for dynamic initialization in pruneInterface,
    getting rid of partial initializations in init.
  * Merge #154 <https://github.com/JafarAbdi/moveit_task_constructor/issues/154>: Fix solution execution from rviz
  * bump cmake version
    get rid of CMP0048 warning.
  * fix rviz solution execution
    Store the set of joints involved in a received trajectories and
    use this set to constrain serialization of solutions for execution to those joints only.
    If this is not done, all joints of the RobotModel are considered for the trajectory,
    but we might not have controllers defined for all joints, so execution will fail.
    Maybe, a better approach might be to just ask the MTC planner to execute a specific solution id.
    However, this requires that the planner node is still available.
  * Merge pull request #151 <https://github.com/JafarAbdi/moveit_task_constructor/issues/151>: Various fixes
  * fix include order
    As INCLUDE_DIRECTORIES of target_link_libraries always go AFTER those from target_include_directories,
    we need to explicitly provide the include order for local targets.
  * resolve clang warnings & suggestions
  * build tests using gmock via catkin_add_gmock (#148 <https://github.com/JafarAbdi/moveit_task_constructor/issues/148>)
    Otherwise these suddenly started to fail for me on Lunar Linux...
  * Add an icon for the RViz interface (#144 <https://github.com/JafarAbdi/moveit_task_constructor/issues/144>)
  * limit float values in rviz to 4 digits
    The previous implicit conversion leads to varying cell width.
  * Add qtbase5-dev build dependency (#142 <https://github.com/JafarAbdi/moveit_task_constructor/issues/142>)
  * Use public API only in visualization package
  * add missing Ogre includes
  * Merge #120 <https://github.com/JafarAbdi/moveit_task_constructor/issues/120>: Add computation timing
  * transmit and display computation in rviz
  * Merge branch master into wip-python-api
  * TaskPanel: execute selected solution
  * Merge branch master into wip-python-api
  * Introduce clang-format (#102 <https://github.com/JafarAbdi/moveit_task_constructor/issues/102>)
    * fix catkin_lint issues
    * introduce clang-format config and apply it
  * add missing header (#100 <https://github.com/JafarAbdi/moveit_task_constructor/issues/100>)
    ... for Qt 5.12.3
  * remove redundant nullptr checks before delete
  * fix Task::operator=(Task&&)
    To move a task instance to another one, it's not sufficient to swap all task members,
    but we also need to adapt all back pointers, i.e. me_ and parent_ pointers of children,
    to point to the (swapped) task instances.
  * fix clang-tidy warnings
    - virtual functions used in constructor / destructor
    - captured variable in lambda expression not used
    - unhandled enums in switch
  * Merge branches 'fix-interface-deduction' (#84 <https://github.com/JafarAbdi/moveit_task_constructor/issues/84>), 'compute-ik-default-timeout' (#80 <https://github.com/JafarAbdi/moveit_task_constructor/issues/80>),
    'fix-visualization' (#76 <https://github.com/JafarAbdi/moveit_task_constructor/issues/76>), and master-improvements (#81 <https://github.com/JafarAbdi/moveit_task_constructor/issues/81>)
  * rework solution msgs
    - to allow solution wrappers (WrappedSolution, SolutionSequence)
    to transmit their comment and markers as well
    - introduced new SolutionInfo.msg,
    which is the info common to solution wrappers and actual SubTrajectories
  * correctly sort upstream_solutions_ in ComputeIK and GeneratePose
    Reworked cost_queue to correctly sort pointer-like types.
    Added unittests for new ValueOrPointeeLess<T> less operator, ordered<T>, and rviz cost ordering.
  * TaskView: configure initial expansion state for tasks
  * extensible TaskPanel
    Provide TaskPanel::addSubPanel() to add new sub panels.
    Each panel can be activated with an associated QToolButton.
    Sub panels, derived from base class SubPanel, automatically load/save their config settings.
    All settings are shown in GlobalSettingsWidget (renamed from TaskSettings).
  * create TaskPanel via rviz::VisualizationFrame::addPanelByName()
    ... ensuring that rviz also saves the panel's settings
  * Merge PR #72 <https://github.com/JafarAbdi/moveit_task_constructor/issues/72>: rviz property visualization
  * RemoteTaskModel: all props read-only
    ... including ones registered in PropertyFactory
  * libyaml-based, incremental parsing of properties
    ... ensures display in document order
  * wip: understand event-based, incremental parsing with libyaml
  * yamp-cpp parsing
  * PropertyFactory::createDefault()
    ... creating a read-only rviz::Property from serialized mtc::Property value
  * unify property handling in LocalTaskModel and RemoteTaskModel
  * pass PlanningScene + DisplayContext to rviz::Property creation
    ... to allow properties to display scene-specific lists or create rviz markers
  * stage-specific factories for PropertyTreeModel
    To allow stages to display their properties in a custom fashion, e.g.
    to show the end-effector marker for PoseStamped, we need to be able
    to register stage-specific factories.
  * Update MTC property on changes of rviz property
  * RemoteTaskModel: show stage properties
  * comments
  * fix display of attached objects
    similar as in https://github.com/ros-planning/moveit/pull/1202
  * Merge branch 'master' into boost-python
  * Merge branches 'cleanup-planner-interface', 'connect', 'fix-visualization' and 'rviz-createMarker' into master
  * propagate info about config changes to rviz
  * cleanup TaskPanel creation
    automatically remove TaskPanel when last TaskDisplay is closed
  * remove left debugging stuff
  * fix realtime rviz display
    In realtime mode, rviz display stopped with the last waypoint and didn't
    show the final scene.
  * use newly provided rviz::createMarker() function
  * fix compiler warnings in release mode
  * fix compiler warnings
  * fix include order
    Local headers should be preferred over those from underlay.
    Consequently use target_include_directories() to properly define include order.
  * rework storing of solutions
    - solutions_, failures_ as SolutionBaseConstPtrs in StagePrivate
    - replace processSolutions() / processFailures() by direct const-access to storage containers
    - generic sendForward(), sendBackward(), spawn(), connect() methods in StagePrivate
    - reuse StagePrivate's sendForward(), sendBackward(), spawn() in containers
    - store created InterfaceStates in StagePrivate::states_
    - Interface: ordered<InterfaceState*> (only store pointers)
    allows for common handling of states of valid and failure solutions
    - remove additional state+solution storages
    - containers: internal->external state mapping as InterfaceState* -> InterfaceState*
  * SolutionBase: rename 'name' to 'comment'
  * Task: only accept containers
  * fix mem leaks
  * Merge branches 'travis', 'fixes', 'visualization' and 'todos'
  * update trail in both directions:
    - show new steps if current_state_ advanced
    - hide steps if current_state_ reverted
  * show start / end scene for empty trajectories
  * reworked TaskSolution visualization
    - code simplification
    - allow slider interaction at any time
    - keep last frame visible if animation finished
    - animating_ is true iff animation is running
    (previously it was also used to indicate the end of an animation cycle)
  * TaskSolutionVisualization: solution_to_display_ -> next_solution_to_display_
  * Merge pull request #37 <https://github.com/JafarAbdi/moveit_task_constructor/issues/37> from ubi-agni/relative-markers
    online update of relative markers
  * switch markers when showing next subtrajectory
  * allow marker pose updates during trajectory display
    moved marker_visual_ from TaskDisplay to TaskSolutionVisualization
  * reworked marker creation
  * Merge branches 'bug-fixes', 'gui' and 'pick-stage'
  * allow arbitrary (planning scene) frames for markers
  * save settings for solution sorting
  * save panel settings
  * highlight currently active solution part
  * auto-expand newly inserted task-pipelines
  * MetaTaskListModel: don't remove top-level items
  * icons to visualize logic flow
  * position marker nodes w.r.t. planning frame
  * fix segfault: always createMarkers()
    ... to have all the scene nodes properly defined
    in case namespace groups will be enabled later on
  * MarkerVisualization: improve comments
    - renamed showMarkers() -> addMarkers()
    - MarkerVisualizationProperty: renamed visible_markers_ -> hosted_markers_
    Hosted markers are not neccessarily visible,
    only if the corresponding namespace group is enabled.
  * position scene node w.r.t. fixed frame
  * [Tree|Flat]MergeProxyModel: cleanup index mapping when removing rows
  * fixed spurious rviz crash?
  * add missing headers
  * rviz plugin: fix segfault
    Postpone setup of subscribers until robot model is successfully loaded.
    Otherwise the scene used in task models is undefined.
  * Merge branches 'cleanup', 'wip-modular-planning', 'wip-containers', 'wip-gui' and 'wip-modify-ps'
  * basic framework to display stage properties
  * bug fixes
    - correctly keep display's Tasks property in sync with panel
    (insertion position didn't match to panel)
    - disable actions depending on context
  * TaskPanel: separate widget classes
    TaskPanel, TaskView, TaskSettings, ...
  * RemoteTaskModel: insert solution also when received on solution topic
  * cleanup findById: fixup for 'allow handling of failures'
    fixup for 014f291defb124a62bb66b78570356ee9e74a7ee
    use SFINAE magic to distinguish both types of findById
    unfortunately crashes gcc 5, clang works
  * fixed some clang warnings
  * code simplification
    Usually, if we receive stage statistics there are some changes as well.
    Hence, always emit notify signal in favour of complex change detection.
  * count all failures for statistics
  * allow handling of failures
    - store "failure" solutions to facilitate debugging
    - Introspection assigns solution IDs as soon as they are created in a stage
    Thus, solution IDs represent their creation order.
    In contrast, the order of publishing (in StageStatistics) should
    represent the cost order.
    - Storing failures is disabled if Introspection is not available.
  * improved realtime display of solutions
    stay in sync with realtime by keeping small time differences
    solution visualization: common setVisibility()
  * Merge branches 'fixes', 'wip-drag-n-drop', 'wip-ikstage' and 'wip-marker-vis'
    resolved conflicts:
    core/include/moveit/task_constructor/container.h
    core/src/container.cpp
    core/src/stages/generate_grasp_pose.cpp
    visualization/motion_planning_tasks/src/task_display.cpp
    visualization/motion_planning_tasks/src/task_panel_p.h
  * correctly pass on StageFactory
  * re-enable drag-n-drop to edit task pipeline
  * fix flaky "deletion" unittest
  * postpone panel instantiation
    ... to ensure that only a single instance is created
    (something not really supported/intended by rviz)
  * auto-load TaskPanel with TaskDisplay
  * fix segfault
  * fixed memory leak
  * consistently use double for costs
  * introducing process_id
    The task id was not unique enough to distinguish different tasks.
    When a task publisher is killed and restarted, it usually comes up with
    the same task id. However, visualization doesn't notice this change and
    get confused / crashes when receiving task statistics and solutions.
  * bug fixes
    - only attempt to retrieve solution if remote was not yet destroyed
    - setting get_solution_client is neccessary only once (pointer never changes)
    - more reliable topic handling + status feedback
  * improve solution visualization / navigation
    - locking: suppress interrupting current solution display when navigating solutions
    - display end scene at the end of a solution display
    - allow to display multiple solutions (its markers)
  * marker visualization
  * fix cmake file
  * add full license information
    so dull... but for the matter of completeness
  * reduce catkin_lint complains in visualization
  * DisplaySolution: struct to unify all data corresponding to a sub trajectory
  * cleanup RemoteTaskModel
    update all solution's data in solution model
  * use std::unique_ptr
  * fix Trusty/Indigo build
  * Merge branch 'wip-visualization' into wip-refactor
  * cmake compatbility to 2.8.12
  * renamed TaskListModelCache -> MetaTaskListModel
  * TaskPanel: create new Display if neccessary
  * navigate solutions
  * ui tuning
    - TabWidget for Task Tree, Settings, ...
    - adjust width of columns in task tree
    - right-align numbers
    - some icons
  * use MergeProxyModels
    - derive TaskListModel from FlatMergeProxyModel
    - TaskDisplay owns its TaskListModel
    - TaskListModelCache as TreeMergeProxyModel
  * MergeProxyModel
  * share scene/robot model between TaskDisplay and associated TaskListModel
  * don't export SerialContainer as pluginlib class
    ... it's imported as builtin
  * TaskListModel: map all encountered source indexes
  * restore panel visibility when enabling
  * fixed visibility update of scene nodes
    All scene nodes are hidden if
    - there is no solution to display
    - or if animation finished and neither the panel nor the trail are enabled
    Hiding scene nodes is done by detaching them from their parent
  * cleanup
  * add myself as maintainer & travis recipient
  * fix qt4 build error due to known moc problem
    qt4's moc is known to have problems with C preprocessor directives.
    Documented e.g. here:
    https://forum.qt.io/topic/37882/qt-4-8-qt_version_check-and-moc-workaround
  * travis config + fixes
  * Merge remote-tracking branch 'origin/master' into wip-refactor
    - cmake 3.1 required for CMAKE_CXX_STANDARD
    - more old-style signal/slots for Qt4 compatibility
  * removed statistics from task description
    - make TaskStatistics a latched topic too
    - subscribing to topics in order (1. description, 2. statistics, 3. solution)
    should ensure that we receive those latched messages in this order
  * DisplaySolution: make scene representing the end state
    - start state is accessible via scene->getParent()
    - allows to show the final state
  * receive task solutions
    - remove parent_id from StageStatistics message
  * split repo into different ROS packages: msgs, core, visualization
  * visualization: qt4 support for signal connections
  * Merge branches 'wip-solution' and 'wip-interaction' into wip-refactor
  * display scene corresponding to SubTrajectory
  * TaskSolutionVisualization: added scene, renamed vars
  * TaskListModel: expand view's item when dropping onto it
  * LocalTaskModel: allow removing of stages
  * LocalTaskModel: populate via drag-n-drop
  * TaskModel / TaskDisplay: keep names in sync
  * TaskDisplay: show tasks
  * DisplaySolution class
  * publish task info in private namespace: ~/taskid
    - default task id is empty
    - introspection becomes member of task, created with Task::enableIntrospection(true)
  * renamed Task, Stage msgs
    - Stage -> StageStatistics + StageDescription
    - Task -> TaskStatistics + TaskDescription
    - removed GetInterfaceState.srv
  * handle IS_DESTROYED flag for RemoteTask
    - turn task red in models
    - if a task with same ID is received again, create a new RemoteTask anyway
  * implemented TaskListModel::removeRows
  * visualization: add missing header includes
  * cmake: fix dependencies & includes
    Partly required to get it to compile with catkin_make.
  * cleanup cmake
  * reworked TaskModels
    - separate RemoteTaskModel / LocalTaskModel, reusing existing storage
    - TaskListModel collects several TaskModels
    - TaskListModelCache: global singleton,
    maintaining TaskListModel of all tasks in system (used by panels)
    - create LocalTask from stages available via pluglinlib
  * merged task_panel + task_solution_display into motion_planning_tasks folder
  * cleanup TaskSolutionDisplay
  * adaptions for TaskSolutionDisplay
  * copied trajectory visualization stuff from moveit
  * TaskPanel: listen to task_monitoring topic
  * Contributors: Henning Kayser, Jafar Abdi, JafarAbdi, Michael Görner, Robert Haschke, YannickRiou, eirtech, janEbert, v4hn

 -- Robert Haschke <rhaschke@techfak.uni-bielefeld.de>  Sun, 29 Jan 2023 00:00:00 -0000


